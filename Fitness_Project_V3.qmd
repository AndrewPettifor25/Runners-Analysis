---
title: "Fitness_Project_V2"
author: "Andrew Pettifor"
format: html
editor: visual
---

```{r echo=FALSE, message=FALSE, warning=FALSE}
library(RTL)
library(tidyverse)
library(plotly)
library(ggplot2)
library(arrow)
library(patchwork)
library(tidyquant)
library(scales)
library(ggridges)
library(viridis)
library(forcats)
library(scales)
library(lubridate)
library(stats)
library(broom)
library(gt)
library(car)
library(GGally)
library(rlang)
library(glue)
library(purrr)
library(ggfortify)

```

# Collie vs Hound Fitness Project

devtools::install_github("risktoollib/RTLedu")

RTLedu::fitness()

```{r include=FALSE}

RTLedu::strava

strava_df <- RTLedu::strava 
  
strava_df
```

```{r include=FALSE}
## Refined Data

##### Here we manually remove any unused variables and data, we could remove these using a package like janitor, but by selecting we can visibily see our removed data using a comparitive name function to the oringal dataset. We now have a cleaner dataset to work with before we begin operating on the data.

#### Additionally We have Changed Distance Meters to KM

#### Chnaged Min and Max Elevation to be MEasured in KM

#### We are removing activities that are exclusive to the "Hound" (Street and Track) (These have been removed to ensure fairness in data)

#### Time is the Same sa Elapsed time
#### Title is useless
```

```{r include=FALSE}
strava_df1 <- strava_df %>% 
  select(Activity.Type,
         Date,
         Distance,
         Calories,
         Avg.HR,
         Max.HR,
         Aerobic.TE,
         Avg.Run.Cadence,
         Max.Run.Cadence,
         Avg.Pace,
         Best.Pace,
         Total.Ascent,
         Total.Descent,
         Avg.Stride.Length,
         Min.Temp,
         Best.Lap.Time,
         Number.of.Laps,
         Max.Temp,
         Moving.Time,
         Elapsed.Time,
         Min.Elevation,
         Max.Elevation,
         Runner) %>% 
  relocate(Runner, .before = Activity.Type) %>% 
  mutate(Distance = ifelse(Distance > 150, Distance / 1000, Distance)) %>% #Converts Distance to KM
  mutate(Max.Elevation = as.numeric(Max.Elevation) / 1000) %>% #Converts Elevation from meters to KM
  mutate(Min.Elevation = as.numeric(Min.Elevation) / 1000) %>%   #Converts Elevation from meters to KM
  separate(Avg.Pace, into = c("Minutes", "Seconds", "Milliseconds"), sep = ":", convert = TRUE) %>%
  mutate(
    Avg.Pace = (Minutes * 60) + Seconds + (Milliseconds / 1000)
  ) %>%
  select(-Minutes, -Seconds, -Milliseconds)
  
strava_df1

strava_df2 <- strava_df1 %>% 
  filter(!Activity.Type %in% c("Track Running", "Street Running")) # Ensures runners will only be compared on the same activities

strava_df2

```

### What is Fitness?

Fitness is a broad term that that can be applied to many fields. The 400lb powerlifter is more “fit” regarding deadlifting but is “unfit” in regard to cycling. So, to define fitness within the constraints of this assignment, we must specify what fitness is in regard to RUNNING.

```{r echo=FALSE}
runner_activity <- strava_df2 %>% 
  group_by(Activity.Type, Runner) %>% 
  summarise(Count = n(), .groups = "drop") %>% 
  pivot_wider(names_from = Runner, values_from = Count)

runner_activity_unfiltered <- strava_df %>% 
  group_by(Activity.Type, Runner) %>% 
  summarise(Count = n(), .groups = "drop") %>% 
  pivot_wider(names_from = Runner, values_from = Count)


```

Examing our Data we can identify the following activites per Runner:

```{r echo=FALSE}
runner_activity_unfiltered %>% gt() %>% 
  opt_interactive()
```

We notice that Collie does not participate in "Street Running" and "Track Running" as such we will be excluding these activities from our model to gice use the following table:

```{r echo=FALSE}

runner_activity%>% gt() %>% 
  opt_interactive()

```

Now that we know what activities we will be comparing our Runners on, we can now begin to determine what fitness is. 
Since Trail Running is the most common activity between the two Runners, we will be basing fitness metrics based around the Activity of Trail Running, and will be using their shared 3 activities to measure the "Fitness" of Each. 

Measurements of Fitness:

To Account for Elevation of Trail Running: Elevation Adjustment = (Total Ascent + Total Descent) / Distance

### Running Efficiency 

Stride Efficiency: (Average Stride Length * Avg Run Cadence)/ (Average Pace * (1+ Elevation Adjustment)
  A more efficient stride will reduce energy expendeture, in theory reducing the calories burned per km. (Cal / Dist)

### Cardio Vascular Fitness 

VO2 Max: 15.3 * (Max.HR/ Average HR during sustained run)
  Compare runners over time, an increase in VO2 max means improved endurance.


### Overall Speed

Elevation Adjusted Pace = Avg. Pace * (1+ Elevation Adjustment)


### Improvement over time

Aerobic Fitness



```{r echo=FALSE}
#New Data Frame with Measurements

strava_df_r <- strava_df2 %>% 
  mutate(Total.Ascent = as.numeric(Total.Ascent),
         Total.Descent = as.numeric(Total.Descent),
         Avg.HR = as.numeric(Avg.HR),
         Max.HR = as.numeric(Max.HR),
         Avg.Run.Cadence = as.numeric(Avg.Run.Cadence),
         Max.Run.Cadence = as.numeric(Max.Run.Cadence),
         Distance = as.numeric(Distance),
         Calories = as.numeric(Calories),
         )
  
strava_df_r <- strava_df_r %>% 
  mutate(Elevation.Adjustment = ((Total.Ascent + Total.Descent)/1000) / Distance) %>% 
  mutate(VO2_Max = 15.3 * (Max.HR / Avg.HR)) %>% 
  mutate(Stride_Efficiency = (Avg.Stride.Length * Avg.Run.Cadence) / (Avg.Pace * (1 + Elevation.Adjustment))) %>% 
  mutate(Adj_Pace = Avg.Pace * (1 + Elevation.Adjustment))

strava_trails <- strava_df_r %>% 
  filter(Activity.Type == "Trail Running")

```


```{r echo=FALSE}
trails_plot <- strava_trails %>% 
  ggplot(aes(x= Date, y=Adj_Pace, color = Runner )) +
           geom_line(size = 1)+
           facet_wrap(~Runner, ncol = 1, scales = "free")+
           scale_x_date(date_labels = "%Y")+
  scale_color_manual(values = c("Hound" = "orange", "Collie" = "blue")) +
           labs(
             title = "Runner progression over time (Adj.Pace)",
             subtitle = "",
             y = "Adj.Pace (Seconds/KM)",
             x= "Date",
             color = "Runner"
           )

trails_plot %>% ggplotly()

```


```{r echo=FALSE}

strava_trails %>% 
  plot_ly(
    y = ~Aerobic.TE,
    color = ~Runner,
    type = "box",
    colors = c("blue","orange")
  ) %>% 
  layout(
    title = list(text = "Trail Aerobic TE Box Plot"),
    xaxis = list(title = ""),
    yaxis = list(
      title = "Aerobic TE"
      ))

```


```{r echo=FALSE}

pc_model_fit1 <- 
  lm(Avg.Pace ~ Avg.HR, data = strava_df2)
pc_model_fit2 <-
  lm(Avg.Pace ~ Avg.HR + Avg.Stride.Length, data = strava_df2)
pc_model_fit3 <-
  lm(Avg.Pace ~ Avg.HR + Avg.Stride.Length + Avg.Run.Cadence, data = strava_df2)
pc_model_fit4 <-
  lm(Avg.Pace ~ Avg.HR + Avg.Stride.Length + Avg.Run.Cadence + Total.Ascent, data = strava_df2)

pc_model_fit1 %>% glance() %>% 
  add_row(pc_model_fit2 %>% glance()) %>%
  add_row(pc_model_fit3 %>% glance()) %>% 
  add_row(pc_model_fit4 %>% glance()) %>% 
  select(c(1:2,4:5)) %>% 
  mutate(model = paste0("Is model ", row_number()," significant to measuring performance?")) %>% 
  select(model, everything()) %>% 
  gt() %>% 
  fmt_percent(columns = !matches("statistical|model"), decimals = 2) %>% 
  fmt_number(columns = matches("statistic"), decimals = 0) %>% 
  fmt_percent(columns = matches("p.value"), decimals = 3)
  
  

```

### Based off the Regression we can determine that Avg. HR is not significant to pace. However, Avg.Stride.Length and Avg.Run.Cadence are. Thus we will incluce them in the model. The model 4 included total Ascent, that change was almost insignificant, but we will still test it independantly on pace below. While it does seem to explain some variance and

```{r echo=FALSE}
pc_model_Ascent <- 
  lm(Avg.Pace ~ Total.Ascent, data = strava_df2)

pc_model_Ascent %>% glance() %>% 
  select(c(1:2,4:5)) %>% 
  mutate(model = paste0("Is Total Ascent ", row_number()," significant to measuring performance?")) %>% 
  select(model, everything()) %>% 
  gt() %>% 
  fmt_percent(columns = !matches("statistical|model"), decimals = 2) %>% 
  fmt_number(columns = matches("statistic"), decimals = 0) %>% 
  fmt_percent(columns = matches("p.value"), decimals = 3)


```

### While it does seem to explain some variance and is significant, there is no overwhelming need to inlude it.

#### We will now test for multicollinearity in to ensure the variables are not to correleted.

```{r echo=FALSE}
vif(pc_model_fit3)

```

#### The VIF scores all fall below 5 and are therefore acceptable

### Best Model

```{r echo=FALSE}
pc_model_fit3_Opt <-
  lm(Avg.Pace ~ Avg.Stride.Length + Avg.Run.Cadence, data = strava_df2)

pc_model_fit3_Opt %>% glance() %>% 
  select(c(1:2,4:5)) %>% 
  mutate(model = paste0("Is Total Ascent ", row_number()," significant to measuring performance?")) %>% 
  select(model, everything()) %>% 
  gt() %>% 
  fmt_percent(columns = !matches("statistical|model"), decimals = 2) %>% 
  fmt_number(columns = matches("statistic"), decimals = 0) %>% 
  fmt_percent(columns = matches("p.value"), decimals = 3)

```



